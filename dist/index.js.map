{"version":3,"sources":["../src/index.js"],"names":["Strategy","use","clientID","process","env","FACEBOOK_ID_SPLATOON","clientSecret","FACEBOOK_SECRET_SPLATOON","callbackURL","accessToken","refreshToken","profile","cb","serializeUser","user","deserializeUser","obj","app","server","createServer","json","limit","bodyLimit","initialize","session","listen","port","console","log","address"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAEA,IAAIA,WAAW,2BAAiBA,QAAhC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAASC,GAAT,CAAa,IAAID,QAAJ,CAAa;AACtBE,YAAUC,QAAQC,GAAR,CAAYC,oBADA;AAEtBC,gBAAcH,QAAQC,GAAR,CAAYG,wBAFJ;AAGtBC,eAAa;AAHS,CAAb,EAKX,UAASC,WAAT,EAAsBC,YAAtB,EAAoCC,OAApC,EAA6CC,EAA7C,EAAiD;AAC/C;AACA;AACA;AACA;AACA;AACA,SAAOA,GAAG,IAAH,EAASD,OAAT,CAAP;AACD,CAZU,CAAb;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAASE,aAAT,CAAuB,UAASC,IAAT,EAAeF,EAAf,EAAmB;AACxCA,KAAG,IAAH,EAASE,IAAT;AACD,CAFD;;AAIA,mBAASC,eAAT,CAAyB,UAASC,GAAT,EAAcJ,EAAd,EAAkB;AACzCA,KAAG,IAAH,EAASI,GAAT;AACD,CAFD;;AAKA,IAAIC,MAAM,wBAAV;AACAA,IAAIC,MAAJ,GAAa,eAAKC,YAAL,CAAkBF;;AAE/B;AACA;AAHa,CAAb,CAIAA,IAAIhB,GAAJ,CAAQ,qBAAWmB,IAAX,CAAgB;AACtBC,SAAO,iBAAOC;AADQ,CAAhB;;AAIR;AACA;AALA,EAMAL,IAAIhB,GAAJ,CAAQ,mBAASsB,UAAT,EAAR;AACAN,IAAIhB,GAAJ,CAAQ,mBAASuB,OAAT,EAAR;;AAEAP,IAAIhB,GAAJ,CAAQ,KAAR;;AAEAgB,IAAIC,MAAJ,CAAWO,MAAX,CAAkB,iBAAOC,IAAzB;AACAC,QAAQC,GAAR,6BAAsCX,IAAIC,MAAJ,CAAWW,OAAX,GAAqBH,IAA3D","file":"index.js","sourcesContent":["import http from 'http'\nimport express from 'express'\nimport bodyParser from 'body-parser'\nimport passport from 'passport'\nimport passportFacebook from 'passport-facebook'\n\nimport config from './config'\nimport routes from './routes'\n\nlet Strategy = passportFacebook.Strategy\n\n// Configure the Facebook strategy for use by Passport.\n//\n// OAuth 2.0-based strategies require a `verify` function which receives the\n// credential (`accessToken`) for accessing the Facebook API on the user's\n// behalf, along with the user's profile.  The function must invoke `cb`\n// with a user object, which will be set at `req.user` in route handlers after\n// authentication.\npassport.use(new Strategy({\n    clientID: process.env.FACEBOOK_ID_SPLATOON,\n    clientSecret: process.env.FACEBOOK_SECRET_SPLATOON,\n    callbackURL: 'http://localhost:3000/login/facebook/return'\n  },\n  function(accessToken, refreshToken, profile, cb) {\n    // In this example, the user's Facebook profile is supplied as the user\n    // record.  In a production-quality application, the Facebook profile should\n    // be associated with a user record in the application's database, which\n    // allows for account linking and authentication with other identity\n    // providers.\n    return cb(null, profile)\n  }));\n\n// Configure Passport authenticated session persistence.\n//\n// In order to restore authentication state across HTTP requests, Passport needs\n// to serialize users into and deserialize users out of the session.  In a\n// production-quality application, this would typically be as simple as\n// supplying the user ID when serializing, and querying the user record by ID\n// from the database when deserializing.  However, due to the fact that this\n// example does not have a database, the complete Facebook profile is serialized\n// and deserialized.\npassport.serializeUser(function(user, cb) {\n  cb(null, user)\n});\n\npassport.deserializeUser(function(obj, cb) {\n  cb(null, obj)\n});\n\n\nlet app = express()\napp.server = http.createServer(app)\n\n// middleware\n// parse application/json\napp.use(bodyParser.json({\n  limit: config.bodyLimit\n}))\n\n// Initialize Passport and restore authentication state, if any, from the\n// session.\napp.use(passport.initialize())\napp.use(passport.session())\n\napp.use('/v1', routes)\n\napp.server.listen(config.port)\nconsole.log(`Server started on port ${app.server.address().port} `)\n"]}